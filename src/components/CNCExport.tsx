import { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import * as XLSX from 'xlsx';
import { saveAs } from 'file-saver';

// Add the missing autoTable method to jsPDF
declare module 'jspdf' {
  interface jsPDF {
    autoTable: (options: any) => jsPDF;
  }
}

interface CNCExportProps {
  cabinetData: {
    dimensions: {
      width: number;
      height: number;
      depth: number;
    };
    material: string;
    cabinetType: string;
    doorStyle: string;
    hasDrawers: boolean;
    cncOptions: {
      hingeMortising: boolean;
      drawerSlideGrooves: boolean;
      shelfPinHoles: boolean;
      joinery: boolean;
      bitDiameter: number;
    };
  };
}

const CNCExport = ({ cabinetData }: CNCExportProps) => {
  const { t } = useTranslation();
  const [activeTab, setActiveTab] = useState<'cutting' | 'gcode' | 'preview'>('cutting');
  const [isExporting, setIsExporting] = useState(false);

  // Generate cutting list based on cabinet data
  const generateCuttingList = () => {
    const { width, height, depth } = cabinetData.dimensions;
    const { cabinetType, hasDrawers } = cabinetData;
    const thickness = 18; // 18mm material thickness
    
    const parts = [
      {
        name: t('sidePanel'),
        quantity: 2,
        dimensions: `${height}x${depth}x${thickness}`,
        material: t(cabinetData.material),
        notes: ''
      },
      {
        name: t('topPanel'),
        quantity: 1,
        dimensions: `${width-thickness*2}x${depth}x${thickness}`,
        material: t(cabinetData.material),
        notes: ''
      },
      {
        name: t('bottomPanel'),
        quantity: 1,
        dimensions: `${width-thickness*2}x${depth}x${thickness}`,
        material: t(cabinetData.material),
        notes: ''
      },
      {
        name: t('backPanel'),
        quantity: 1,
        dimensions: `${width-thickness*2}x${height-thickness*2}x${6}`,
        material: t('plywood'),
        notes: ''
      }
    ];

    // Add shelves based on cabinet type
    if (cabinetType === 'base' || cabinetType === 'tall') {
      parts.push({
        name: t('shelf'),
        quantity: cabinetType === 'tall' ? 4 : 2,
        dimensions: `${width-thickness*2-10}x${depth-thickness-10}x${thickness}`,
        material: t(cabinetData.material),
        notes: ''
      });
    }

    // Add doors if not open cabinet
    if (cabinetType !== 'open') {
      parts.push({
        name: t('door'),
        quantity: 2,
        dimensions: `${height-5}x${width/2-5}x${thickness}`,
        material: t(cabinetData.material),
        notes: ''
      });
    }

    // Add drawers if specified
    if (hasDrawers) {
      const drawerCount = 3; // Default drawer count
      const drawerHeight = Math.floor((height - thickness * (drawerCount + 1)) / drawerCount);
      
      parts.push({
        name: t('drawerFront'),
        quantity: drawerCount,
        dimensions: `${width-thickness*2-10}x${drawerHeight-5}x${thickness}`,
        material: t(cabinetData.material),
        notes: ''
      });
      
      parts.push({
        name: t('drawer') + ' ' + t('sidePanel'),
        quantity: drawerCount * 2,
        dimensions: `${depth-thickness-50}x${drawerHeight-thickness-5}x${thickness}`,
        material: t(cabinetData.material),
        notes: ''
      });
      
      parts.push({
        name: t('drawer') + ' ' + t('backPanel'),
        quantity: drawerCount,
        dimensions: `${width-thickness*4-20}x${drawerHeight-thickness-5}x${thickness}`,
        material: t(cabinetData.material),
        notes: ''
      });
      
      parts.push({
        name: t('drawer') + ' ' + t('bottomPanel'),
        quantity: drawerCount,
        dimensions: `${width-thickness*4-20}x${depth-thickness-50}x${6}`,
        material: t('plywood'),
        notes: ''
      });
    }

    return parts;
  };

  // Generate G-code for CNC operations
  const generateGCode = () => {
    const { width, height, depth } = cabinetData.dimensions;
    const { cncOptions } = cabinetData;
    const thickness = 18; // 18mm material thickness
    
    let gcode = `;Cabinet CNC Program\n`;
    gcode += `;Generated by Cabinet Designer Pro\n`;
    gcode += `;Dimensions: ${width}x${height}x${depth}mm\n`;
    gcode += `;Material: ${t(cabinetData.material)}\n\n`;
    
    gcode += `G21 ; Set units to mm\n`;
    gcode += `G90 ; Absolute positioning\n\n`;
    
    // Tool definitions
    gcode += `;Tool definitions\n`;
    gcode += `T1 ; ${cncOptions.bitDiameter}mm straight bit\n\n`;
    
    // Hinge mortising if enabled
    if (cncOptions.hingeMortising) {
      gcode += `;Hinge mortising operations\n`;
      gcode += `T1 M6 ; Load straight bit\n`;
      gcode += `M3 S18000 ; Spindle on at 18000 RPM\n`;
      
      // Left side panel hinges
      const hingePositions = [100, height - 100]; // 100mm from top and bottom
      
      hingePositions.forEach((pos, index) => {
        gcode += `\n;Hinge ${index + 1}\n`;
        gcode += `G0 X0 Y${pos} Z5 ; Rapid to position\n`;
        gcode += `G1 Z-12 F300 ; Plunge to depth\n`;
        gcode += `G1 X35 F800 ; Cut hinge pocket\n`;
        gcode += `G1 Y${pos + 35} ; Continue pocket\n`;
        gcode += `G1 X0 ; Continue pocket\n`;
        gcode += `G1 Y${pos} ; Complete pocket\n`;
        gcode += `G0 Z15 ; Retract\n`;
      });
      
      gcode += `\n`;
    }
    
    // Drawer slide grooves if enabled
    if (cncOptions.drawerSlideGrooves) {
      gcode += `;Drawer slide groove operations\n`;
      
      const drawerCount = 3;
      const drawerHeight = Math.floor((height - thickness * (drawerCount + 1)) / drawerCount);
      
      for (let i = 0; i < drawerCount; i++) {
        const yPos = thickness + drawerHeight / 2 + i * (drawerHeight + thickness);
        
        gcode += `\n;Drawer ${i + 1} slide grooves\n`;
        gcode += `G0 X0 Y${yPos} Z5 ; Rapid to position\n`;
        gcode += `G1 Z-8 F300 ; Plunge to depth\n`;
        gcode += `G1 X${depth - 50} F800 ; Cut groove\n`;
        gcode += `G0 Z15 ; Retract\n`;
        
        // Right side panel
        gcode += `G0 X${width} Y${yPos} Z5 ; Rapid to position\n`;
        gcode += `G1 Z-8 F300 ; Plunge to depth\n`;
        gcode += `G1 X${width - depth + 50} F800 ; Cut groove\n`;
        gcode += `G0 Z15 ; Retract\n`;
      }
      
      gcode += `\n`;
    }
    
    // Shelf pin holes if enabled
    if (cncOptions.shelfPinHoles) {
      gcode += `;Shelf pin hole operations\n`;
      
      const holeSpacing = 32; // 32mm system
      const startHeight = 100;
      const endHeight = height - 100;
      const numHoles = Math.floor((endHeight - startHeight) / holeSpacing);
      
      // Left side panel
      gcode += `\n;Left panel shelf pin holes\n`;
      for (let i = 0; i <= numHoles; i++) {
        const yPos = startHeight + i * holeSpacing;
        gcode += `G0 X20 Y${yPos} Z5 ; Rapid to position\n`;
        gcode += `G1 Z-8 F300 ; Plunge to depth\n`;
        gcode += `G0 Z15 ; Retract\n`;
      }
      
      // Right side panel
      gcode += `\n;Right panel shelf pin holes\n`;
      for (let i = 0; i <= numHoles; i++) {
        const yPos = startHeight + i * holeSpacing;
        gcode += `G0 X${width - 20} Y${yPos} Z5 ; Rapid to position\n`;
        gcode += `G1 Z-8 F300 ; Plunge to depth\n`;
        gcode += `G0 Z15 ; Retract\n`;
      }
      
      gcode += `\n`;
    }
    
    // Advanced joinery if enabled
    if (cncOptions.joinery) {
      gcode += `;Advanced joinery operations\n`;
      
      // Dado joints for shelves
      gcode += `\n;Dado joints for shelves\n`;
      
      const shelfPositions = [height / 3, height * 2 / 3];
      
      // Left side panel dados
      shelfPositions.forEach((pos) => {
        gcode += `G0 X0 Y${pos - thickness/2} Z5 ; Rapid to position\n`;
        gcode += `G1 Z-${thickness/2} F300 ; Plunge to depth\n`;
        gcode += `G1 X${depth - 20} F800 ; Cut dado\n`;
        gcode += `G0 Z15 ; Retract\n`;
      });
      
      // Right side panel dados
      shelfPositions.forEach((pos) => {
        gcode += `G0 X${width} Y${pos - thickness/2} Z5 ; Rapid to position\n`;
        gcode += `G1 Z-${thickness/2} F300 ; Plunge to depth\n`;
        gcode += `G1 X${width - depth + 20} F800 ; Cut dado\n`;
        gcode += `G0 Z15 ; Retract\n`;
      });
    }
    
    // Program end
    gcode += `\n;Program end\n`;
    gcode += `M5 ; Spindle off\n`;
    gcode += `G0 Z50 ; Retract to safe height\n`;
    gcode += `M30 ; Program end\n`;
    
    return gcode;
  };

  // Export functions
  const exportToPDF = () => {
    setIsExporting(true);
    
    try {
      const cuttingList = generateCuttingList();
      const doc = new jsPDF();
      
      // Add header
      doc.setFontSize(20);
      doc.text('Cabinet Cutting List', 105, 20, { align: 'center' });
      
      // Add cabinet info
      doc.setFontSize(12);
      doc.text(`Cabinet Type: ${t(`cabinet${cabinetData.cabinetType.charAt(0).toUpperCase() + cabinetData.cabinetType.slice(1)}`)}`, 20, 40);
      doc.text(`Dimensions: ${cabinetData.dimensions.width}x${cabinetData.dimensions.height}x${cabinetData.dimensions.depth}mm`, 20, 50);
      doc.text(`Material: ${t(cabinetData.material)}`, 20, 60);
      
      // Add cutting list table
      const tableColumn = ["Part", "Qty", "Dimensions", "Material", "Notes"];
      const tableRows = cuttingList.map(part => [
        part.name,
        part.quantity.toString(),
        part.dimensions,
        part.material,
        part.notes
      ]);
      
      doc.autoTable({
        head: [tableColumn],
        body: tableRows,
        startY: 70,
        theme: 'striped',
        headStyles: { fillColor: [44, 62, 80] }
      });
      
      // Save PDF
      doc.save('cabinet_cutting_list.pdf');
    } catch (error) {
      console.error('Error exporting to PDF:', error);
    } finally {
      setIsExporting(false);
    }
  };

  const exportToExcel = () => {
    setIsExporting(true);
    
    try {
      const cuttingList = generateCuttingList();
      
      // Create worksheet
      const ws = XLSX.utils.json_to_sheet(cuttingList.map(part => ({
        'Part Name': part.name,
        'Quantity': part.quantity,
        'Dimensions': part.dimensions,
        'Material': part.material,
        'Notes': part.notes
      })));
      
      // Create workbook
      const wb = XLSX.utils.book_new();
      XLSX.utils.book_append_sheet(wb, ws, 'Cutting List');
      
      // Generate Excel file
      const excelBuffer = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
      const data = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
      
      // Save file
      saveAs(data, 'cabinet_cutting_list.xlsx');
    } catch (error) {
      console.error('Error exporting to Excel:', error);
    } finally {
      setIsExporting(false);
    }
  };

  const exportToDXF = () => {
    setIsExporting(true);
    
    try {
      const { width, height, depth } = cabinetData.dimensions;
      const thickness = 18; // 18mm material thickness
      
      // Create a simple DXF content (this is a simplified version)
      let dxfContent = '0\nSECTION\n2\nENTITIES\n';
      
      // Add side panels
      dxfContent += `0\nPOLYLINE\n8\nSidePanel\n66\n1\n70\n1\n`;
      dxfContent += `0\nVERTEX\n8\nSidePanel\n10\n0\n20\n0\n`;
      dxfContent += `0\nVERTEX\n8\nSidePanel\n10\n${depth}\n20\n0\n`;
      dxfContent += `0\nVERTEX\n8\nSidePanel\n10\n${depth}\n20\n${height}\n`;
      dxfContent += `0\nVERTEX\n8\nSidePanel\n10\n0\n20\n${height}\n`;
      dxfContent += `0\nSEQEND\n`;
      
      // Add top and bottom panels
      dxfContent += `0\nPOLYLINE\n8\nTopBottomPanel\n66\n1\n70\n1\n`;
      dxfContent += `0\nVERTEX\n8\nTopBottomPanel\n10\n0\n20\n0\n`;
      dxfContent += `0\nVERTEX\n8\nTopBottomPanel\n10\n${width-thickness*2}\n20\n0\n`;
      dxfContent += `0\nVERTEX\n8\nTopBottomPanel\n10\n${width-thickness*2}\n20\n${depth}\n`;
      dxfContent += `0\nVERTEX\n8\nTopBottomPanel\n10\n0\n20\n${depth}\n`;
      dxfContent += `0\nSEQEND\n`;
      
      // End DXF file
      dxfContent += '0\nENDSEC\n0\nEOF\n';
      
      // Create and save DXF file
      const blob = new Blob([dxfContent], { type: 'application/dxf' });
      saveAs(blob, 'cabinet_parts.dxf');
    } catch (error) {
      console.error('Error exporting to DXF:', error);
    } finally {
      setIsExporting(false);
    }
  };

  const exportGCode = () => {
    setIsExporting(true);
    
    try {
      const gcode = generateGCode();
      
      // Create and save G-code file
      const blob = new Blob([gcode], { type: 'text/plain' });
      saveAs(blob, 'cabinet_cnc.gcode');
    } catch (error) {
      console.error('Error exporting G-code:', error);
    } finally {
      setIsExporting(false);
    }
  };

  return (
    <div className="flex flex-col h-full">
      <div className="flex space-x-2 rtl:space-x-reverse mb-4">
        <button
          className={`px-3 py-1 rounded-md ${
            activeTab === 'cutting' 
              ? 'bg-primary text-primary-foreground' 
              : 'bg-muted hover:bg-muted/80'
          }`}
          onClick={() => setActiveTab('cutting')}
        >
          {t('viewCutting')}
        </button>
        <button
          className={`px-3 py-1 rounded-md ${
            activeTab === 'gcode' 
              ? 'bg-primary text-primary-foreground' 
              : 'bg-muted hover:bg-muted/80'
          }`}
          onClick={() => setActiveTab('gcode')}
        >
          {t('cncPreview')}
        </button>
        <button
          className={`px-3 py-1 rounded-md ${
            activeTab === 'preview' 
              ? 'bg-primary text-primary-foreground' 
              : 'bg-muted hover:bg-muted/80'
          }`}
          onClick={() => setActiveTab('preview')}
        >
          {t('toolpathPreview')}
        </button>
      </div>
      
      <div className="flex-1 border border-border rounded-lg overflow-hidden bg-background p-4">
        {activeTab === 'cutting' && (
          <div className="h-full overflow-auto">
            <table className="w-full border-collapse">
              <thead>
                <tr className="bg-muted">
                  <th className="border border-border p-2 text-left">{t('partName')}</th>
                  <th className="border border-border p-2 text-center">{t('quantity')}</th>
                  <th className="border border-border p-2 text-center">{t('dimensions')}</th>
                  <th className="border border-border p-2 text-left">{t('material')}</th>
                  <th className="border border-border p-2 text-left">{t('notes')}</th>
                </tr>
              </thead>
              <tbody>
                {generateCuttingList().map((part, index) => (
                  <tr key={index} className={index % 2 === 0 ? 'bg-background' : 'bg-muted/30'}>
                    <td className="border border-border p-2">{part.name}</td>
                    <td className="border border-border p-2 text-center">{part.quantity}</td>
                    <td className="border border-border p-2 text-center">{part.dimensions}</td>
                    <td className="border border-border p-2">{part.material}</td>
                    <td className="border border-border p-2">{part.notes}</td>
                  </tr>
                ))}
              </tbody>
            </table>
            
            <div className="mt-4 flex space-x-2 rtl:space-x-reverse">
              <button 
                className="bg-primary text-primary-foreground py-2 px-4 rounded-md hover:bg-primary/90 transition-colors disabled:opacity-50"
                onClick={exportToPDF}
                disabled={isExporting}
              >
                {isExporting ? t('exporting') : t('exportPdf')}
              </button>
              <button 
                className="bg-secondary text-secondary-foreground py-2 px-4 rounded-md hover:bg-secondary/90 transition-colors disabled:opacity-50"
                onClick={exportToExcel}
                disabled={isExporting}
              >
                {isExporting ? t('exporting') : t('exportExcel')}
              </button>
            </div>
          </div>
        )}
        
        {activeTab === 'gcode' && (
          <div className="h-full flex flex-col">
            <pre className="flex-1 bg-muted/30 p-4 rounded-md overflow-auto font-mono text-sm">
              {generateGCode()}
            </pre>
            
            <div className="mt-4 flex space-x-2 rtl:space-x-reverse">
              <button 
                className="bg-primary text-primary-foreground py-2 px-4 rounded-md hover:bg-primary/90 transition-colors disabled:opacity-50"
                onClick={exportGCode}
                disabled={isExporting}
              >
                {isExporting ? t('exporting') : t('exportGcode')}
              </button>
              <button 
                className="bg-secondary text-secondary-foreground py-2 px-4 rounded-md hover:bg-secondary/90 transition-colors disabled:opacity-50"
                onClick={exportToDXF}
                disabled={isExporting}
              >
                {isExporting ? t('exporting') : t('exportDxf')}
              </button>
            </div>
          </div>
        )}
        
        {activeTab === 'preview' && (
          <div className="h-full flex items-center justify-center">
            <div className="text-center">
              <div className="w-64 h-64 mx-auto bg-muted rounded-md flex items-center justify-center mb-4">
                <p className="text-muted-foreground">{t('toolpathPreviewPlaceholder')}</p>
              </div>
              <p>{t('toolpathPreviewDescription')}</p>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default CNCExport;
